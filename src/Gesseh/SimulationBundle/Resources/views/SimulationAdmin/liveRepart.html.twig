{% extends 'GessehCoreBundle::layout.html.twig' %}

{% block title %}{{ parent() }} - Simulation{% endblock %}

{% block titlecontent %}Résultats de la simulation{% endblock %}

{% block actionscontent %}
    {% if simulations is not empty %}
        <li class="btn btn-primary">
            <a href="{{ path('GSimul_SSim') }}" title="Lancer l'algorithme de simulation">
                {{ icon('refresh') }} Actualiser les simulations
            </a>
        </li>
        <li class="btn btn-primary">
            <a href="{{ path('GSimul_SASave') }}" title="Valider les simulation et les enregistrer dans les stages." class="confirm" confirm="Attention ! Valider les données va enregistrer les stages correspondants et supprimer la simulation actuelle. Souhaitez-vous continuer ?">
                {{ icon('ok-circle') }} Valider
            </a>
        </li>
        <li class="btn btn-primary">
            <a href="{{ path('GSimul_SAPurge') }}" title="Supprimer la table de simulation" class="confirm" confirm="Attention ! Cette opération va supprimer toutes les données concernant la simulation en cours. Souhaitez-vous continuer ?">
                {{ icon('trash') }} Supprimer
            </a>
        </li>
    {% else %}
        <li class="btn btn-primary">
            <a href="{{ path('GSimul_SADefine') }}" title="Cliquez pour générer la table de simulation">
                {{ icon('off') }} Générer la table
            </a>
        </li>
    {% endif %}
{% endblock %}

{% block content %}
    {% if simulations is not empty %}
        <div id="simul_progress">
            Progression de la simulation : <span>{{ simul_total - simul_missing }} / {{ simul_total }} participants</span>
            <progress class="progressbar" value="{{ (simul_total - simul_missing) / simul_total * 100 }}" max="100"></progress>
        </div>
        <ul class="entities wishes list-group">
            {% for simulation in simulations %}
                <li class="entity wish list-group-item" style="height:50px;">
                    <div class="entity_item rank" style="vertical-align: middle;">{{ simulation.rank }}.</div>
                    <div class="entity_item student" style="vertical-align: middle;">{{ simulation.student }} : </div>
                    {% if simulation.isValidated %}
                        <div class="entity_item validated">
                            {% if department %}
                                <span>{{ department }}</span>
                                {% if isExcess %}
                                    <span>en surnombre</span>
                                {% endif %}
                            {% else %}
                                <span>Ne participe pas</span>
                            {% endif %}
                        </div>
                    {% else %}
                        <div class="entity_item pull-right ui-widget combobox" id="form_{{ simulation.id }}">
                            {{ form_start(forms[simulation.id]) }}
                            <span>{{ form_widget(forms[simulation.id].department) }}</span>
                            <span>{{ form_widget(forms[simulation.id].is_excess) }}</span>
                            <span>{{ form_widget(forms[simulation.id].active) }}</span>
                            <span>{{ form_widget(forms[simulation.id].Valider) }}</span>
                            <span>{{ form_rest(forms[simulation.id]) }}</span>
                            {{ form_end(forms[simulation.id]) }}
                        </div>
                    {% endif %}
                </li>
            {% endfor %}
        </ul>
    {% endif %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
      <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
    <script>
        $(document).ready(function() {
            $('.valid').parent('li').addClass('valid');
            $('.invalid').parent('li').addClass('invalid');
            $('.grey').parent('li').addClass('grey');
            $('.warning').parent('li').addClass('warning');
            $('.checkbox').addClass('inline');
        });
    </script>
    <script>
    </script>
    <script>
    (function( $ ) {
        $.widget( "custom.combobox", {
            _create: function() {
                this.wrapper = $( "<span>" )
                    .addClass( "custom-combobox" )
                    .insertAfter( this.element );

                this.element.hide();
                this._createAutocomplete();
                this._createShowAllButton();
            },

            _createAutocomplete: function() {
                var selected = this.element.children( ":selected" ),
                value = selected.val() ? selected.text() : "";

                this.input = $( "<input>" )
                    .appendTo( this.wrapper )
                    .val( value )
                    .attr( "title", "" )
                    .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
                    .autocomplete({
                        delay: 0,
                        minLength: 0,
                        source: $.proxy( this, "_source" )
                    })
                .tooltip({
                    tooltipClass: "ui-state-highlight"
                });

                this._on( this.input, {
                    autocompleteselect: function( event, ui ) {
                        ui.item.option.selected = true;
                        this._trigger( "select", event, {
                            item: ui.item.option
                        });
                    },

                    autocompletechange: "_removeIfInvalid"
                });
            },

            _createShowAllButton: function() {
                var input = this.input,
                wasOpen = false;

                $( "<a>" )
                    .attr( "tabIndex", -1 )
                    .attr( "title", "Show All Items" )
                    .tooltip()
                    .appendTo( this.wrapper )
                    .button({
                        icons: {
                            primary: "ui-icon-triangle-1-s"
                        },
                        text: false
                    })
                .removeClass( "ui-corner-all" )
                    .addClass( "custom-combobox-toggle ui-corner-right" )
                    .mousedown(function() {
                        wasOpen = input.autocomplete( "widget" ).is( ":visible" );
                    })
                .click(function() {
                    input.focus();

                    // Close if already visible
                    if ( wasOpen ) {
                        return;
                    }

                    // Pass empty string as value to search for, displaying all results
                    input.autocomplete( "search", "" );
                });
            },

            _source: function( request, response ) {
                var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
                response( this.element.children( "option" ).map(function() {
                    var text = $( this ).text();
                    if ( this.value && ( !request.term || matcher.test(text) ) )
                        return {
                            label: text,
                            value: text,
                            option: this
                        };
                }) );
            },

            _removeIfInvalid: function( event, ui ) {

                // Selected an item, nothing to do
                if ( ui.item ) {
                    return;
                }

                // Search for a match (case-insensitive)
                var value = this.input.val(),
                valueLowerCase = value.toLowerCase(),
                    valid = false;
                this.element.children( "option" ).each(function() {
                    if ( $( this ).text().toLowerCase() === valueLowerCase ) {
                        this.selected = valid = true;
                        return false;
                    }
                });

                // Found a match, nothing to do
                if ( valid ) {
                    return;
                }

                // Remove invalid value
                this.inputval( "" )
                    .attr( "title", value + " didn't match any item" )
                    .tooltip( "open" );
                this.element.val( "" );
                this._delay(function() {
                    this.input.tooltip( "close" ).attr( "title", "" );
                }, 2500 );
                this.input.autocomplete( "instance" ).term = "";
            },

            _destroy: function() {
                this.wrapper.remove();
                this.element.show();
            }
        });
    })( jQuery );

$(function() {
    $( ".combobox select" ).combobox();
});
    </script>
{% endblock %}

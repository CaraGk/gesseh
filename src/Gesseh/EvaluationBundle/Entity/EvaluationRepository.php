<?php

namespace Gesseh\EvaluationBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EvaluationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvaluationRepository extends EntityRepository
{
  public function getEvaluationQuery()
  {
    return $this->createQueryBuilder('e')
                ->join('e.placement', 'p')
                ->join('p.department', 'd')
                ->join('e.eval_criteria', 'c')
    ;
  }

  public function getTextByDepartment($id)
  {
    $query = $this->getEvaluationQuery();
    $query->where('d.id = :id')
            ->setParameter('id', $id)
          ->andWhere('c.type = 2');

    return $query->getQuery()->getResult();
  }

  public function getNumByDepartment($id)
  {
    $query = $this->getEvaluationQuery();
    $query->where('d.id = :id')
            ->setParameter('id', $id)
          ->andWhere('c.type = 1')
          ->orderBy('c.name', 'asc');

    $results = $query->getQuery()->getResult();
    $calc = array();

    foreach ($results as $result)
    {
      if (!isset($calc[$result->getEvalCriteria()->getId()]['count'])) {
        $calc[$result->getEvalCriteria()->getId()]['total'] = 0;
        $calc[$result->getEvalCriteria()->getId()]['count'] = 0;
        $calc[$result->getEvalCriteria()->getId()]['name'] = $result->getEvalCriteria()->getName();
      }

      $calc[$result->getEvalCriteria()->getId()]['total'] += (int) $result->getValue();
      $calc[$result->getEvalCriteria()->getId()]['count'] ++;
      $calc[$result->getEvalCriteria()->getId()]['mean'] = round($calc[$result->getEvalCriteria()->getId()]['total'] / $calc[$result->getEvalCriteria()->getId()]['count'], 1);
//      $calc[$result->getEvalCriteria()->getId()]['ratio'] = $result->getEvalCriteria()->getRatio();
    }

    return $calc;
  }

  public function getEvaluatedList($type = 'array', $user_id = null)
  {
    $query = $this->createQueryBuilder('e')
                  ->join('e.placement', 'p')
                  ->groupBy('e.placement')
                  ->addSelect('p');

    if ($user_id) {
      $query->where('p.student = :user_id')
              ->setParameter('user_id', $user_id);
    }

    $results = $query->getQuery()->getResult();
    $list = array();

    foreach ($results as $result) {
      array_push($list, $result->getPlacement()->getId());
    }

    if ($type = 'array')
      return $list;
    elseif ($type = 'list')
      return implode(',', $list);
    else
      return null;
  }
}

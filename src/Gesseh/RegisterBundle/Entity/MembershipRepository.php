<?php

/**
 * This file is part of GESSEH project
 *
 * @author: Pierre-François ANGRAND <gesseh@medlibre.fr>
 * @copyright: Copyright 2015 Pierre-François Angrand
 * @license: GPLv3
 * See LICENSE file or http://www.gnu.org/licenses/gpl.html
 */

namespace Gesseh\RegisterBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MembershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MembershipRepository extends EntityRepository
{
    public function getLastByUsername($username)
    {
        $query = $this->createQueryBuilder('m');
        $query->join('m.student', 's')
            ->join('s.user', 'u')
            ->addSelect('s')
            ->addSelect('u')
            ->where('u.username = :username')
            ->setParameter('username', $username)
            ->orderBy('m.id', 'desc')
            ->setMaxResults(1)
        ;

        return $query->getQuery()->getSingleResult();
    }

    public function getCurrentForStudent($student, $payed = false)
    {
        $query = $this->createQueryBuilder('m');
        $query->where('m.student = :student')
            ->setParameter('student', $student)
            ->andWhere('m.expiredOn > :now')
            ->setParameter('now', new \DateTime('now'))
            ->setMaxResults(1)
        ;

        if ($payed)
            $query->andWhere('m.payedOn is not NULL');

        return $query->getQuery()->getOneOrNullResult();
    }

    public function getCurrentForAll($paidOnly = false)
    {
        $query = $this->createQueryBuilder('m')
            ->join('m.student', 's')
            ->addSelect('s')
            ->join('s.user', 'u')
            ->addSelect('u')
            ->where('m.expiredOn > :now')
            ->setParameter('now', new \DateTime('now'))
            ->orderBy('s.name', 'asc');

        if ($paidOnly)
            $query->andWhere('m.payedOn is not NULL');

        return $query->getQuery()->getResult();
    }
}

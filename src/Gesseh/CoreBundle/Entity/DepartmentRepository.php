<?php

/**
 * This file is part of GESSEH project
 *
 * @author: Pierre-François ANGRAND <gesseh@medlibre.fr>
 * @copyright: Copyright 2013-2016 Pierre-François Angrand
 * @license: GPLv3
 * See LICENSE file or http://www.gnu.org/licenses/gpl.html
 */

namespace Gesseh\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DepartmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DepartmentRepository extends EntityRepository
{
  public function getBaseQuery()
  {
    return $this->createQueryBuilder('d')
                ->join('d.hospital', 'h')
                ->join('d.accreditations', 'a')
                ->join('a.sector', 's')
                ->addSelect('h')
                ->addSelect('a')
                ->addSelect('s')
    ;
  }

  public function getBaseQueryWithRepartitions()
  {
    $query = $this->getBaseQuery();

    return $query->join('d.repartitions', 'r')
                 ->addSelect('r');
  }

  /**
   * Get one department with joinable tables from id
   *
   * @return QueryResult
   */
  public function getById($id)
  {
    $query = $this->getBaseQuery();
    $query->where('d.id = :id')
          ->setParameter('id', $id);

    return $query->getQuery()
                 ->getSingleResult();
  }

  /**
   * Get next department for maintenance purpose
   *
   * @return Department
   */
    public function getNext($id = 0)
    {
        $query = $this->getBaseQuery();
        $query->where('d.id > :id')
              ->setParameter('id', $id)
              ->setMaxResults(1)
        ;

        return $query->getQuery()
                     ->getOneOrNullResult()
        ;
    }

  public function getByStudent($student_id)
  {
    $query = $this->getBaseQuery();
    $query->join('d.placements', 'p')
          ->join('p.student', 't')
          ->where('t.id = :student_id')
            ->setParameter('student_id', $student_id);

    return $query->getQuery()->getResult();
  }

  public function getBySectorForPeriod($sector_id, $period_id)
  {
    $query = $this->getBaseQuery();
    $query->join('d.repartitions', 'r')
          ->join('r.period', 'p')
          ->addSelect('r')
          ->where('a.end > :now')
          ->setParameter('now', new \DateTime('now'))
          ->andWhere('s.id = :sector_id')
          ->setParameter('sector_id', $sector_id)
          ->andWhere('p.id = :period_id')
          ->setParameter('period_id', $period_id)
    ;

    return $query->getQuery()
                 ->getResult()
    ;
  }

  public function getAll(array $orderBy = array('h' => 'asc', 's' => 'asc'))
  {
    $query = $this->getBaseQuery();
    foreach ($orderBy as $col => $order) {
      $query->addOrderBy($col . '.name', $order);
    }

    return $query->getQuery()
                 ->getResult();
  }

    public function getAvailableQuery()
    {
        $query = $this->getBaseQueryWithRepartitions();
        $query->where('r.number > 0')
              ->andWhere('a.end > :now')
              ->setParameter('now', new \DateTime('now'))
              ->addOrderBy('h.name', 'asc')
              ->addOrderBy('d.name', 'asc')
        ;
        return $query;
    }

    public function getAvailable()
    {
        $query = $this->getAvailableQuery();

        return $query->getQuery()
                     ->getResult()
        ;
    }

  public function getAdaptedUserList($rules)
  {
    $query = $this->getBaseQueryWithRepartitions();
    $query->addOrderBy('h.name', 'asc')
          ->addOrderBy('d.name', 'asc')
          ->where('r.number > 0')
          ->andWhere('a.end > :now')
          ->setParameter('now', new \DateTime('now'))
    ;

    if ($rules['department']['NOT'])
      $query->andWhere('d.id NOT IN (' . implode(',', $rules['department']['NOT']) . ')');
    if ($rules['sector']['NOT'])
      $query->andWhere('a.sector NOT IN (' . implode(',', $rules['sector']['NOT']) . ')');
    if ($rules['department']['IN'])
      $query->andWhere('d.id IN (' . implode(',', $rules['department']['IN']) . ')');

    return $query;
  }
}
